two strings, string a and string b,

form string a by cancanating multiple string b, i can
form string a by cancanating multiple string b, i can

a: zaza b: baz
z  az   a

Given two strings, tell whether such cancatnation is possible.

a: zacza b: baz
a: aaaaa b: fhdfghfghda

i = 0, index in a ;
j = 0, index in b;

boolean canForm(String a, Sting b) {
    // store all chars in b to a set
    HashSet<Character> set = new HashSet<>();
    for (char c : b.toCharArray()) {
        set.add(c);
    }

    // find out whether there are letters in a not in b
    for (char c : a.toCharArr()) {
        if (!set.contains(c)) {
            return false;
        }
    }
    return true;

}



2、leetcode  158. Read N Characters Given Read4 II - Call multiple times

3、听声音是个白人小姐姐
  第一道超级简单
  ['a','b',' ',' ','c']
  如果遇到连续的‘ ’，就只保留第一个。one pointer就解决了

  然后开始问简历。

  第二道也很简单，
  subsetII, 只不过是不需要输出所有结果，返回数量就行了。
  首先用recursion那种方法做的，写出一个解法。
  后来一直试图搞出iterative的，但到最后也没写出来。。

4、给一个数组，里面是员工的工资，工资总额有一个budget，一开始员工工资总和是超过budget的，要求求出数k，然后把数组里所有比k大的工资都减少到k，
使得数组里的工资总和刚好等于budget。
举个例子，工资数组：[100,200,300,400]，budget=800，那么求出的k应该是250, 这样削减后的工资是100 + 200 + 250 + 250刚好等于800

思路：binary search
上限是最大值，下限是budge / 人数


5、给定一堆坐标点（x, y）求能组成的最小的rectangle，长跟宽要跟坐标轴平行


6.给定一棵二叉树，在这棵树中有一些节点需要被删除，现在有一个可供调用的函数shouldBeErased(Node *t)可以用来判断每个节点是否应被移除（返回一个布尔值true或者false）。
在删除了那些需要被移除的节点之后，原来的二叉树就会被打散成一棵棵子树，或者说是一个森林，要求返回最终的这个森林（用一个数组来表示，数组中每个元素是对应子树的树根）。
我就说可以用DFS,从树根开始搜索，对每个节点判断一下是否应被删除，如果要删除的话就移除掉它并递归调用此函数来删除左右子树里要删除的节点并合并左右子树得到的森林，
如果不删除的话也还是递归地对左右子树进行删除操作，但合并的时候稍微注意一下如果左（或右）子树的树根没有被删除，那么它应该连着当前的树根，也就是说左（右）子树得到的森林中有一个子树并不是剥离出去的。
由于我在这棵树中每个节点都进行了合并左右子树对应森林的操作，分析时间复杂度的话每一层都要进行O(n)的合并，n是原来树中节点总数，树的高度是O(logn)，所以总复杂度应该是O(nlogn)。
我刚开始分析复杂度的时候就说每个节点都要进行复杂度为O(n)的合并，所以总复杂度是O(n*n)=O(n^2)，是面试官好心提醒了一下问我复杂度真的是O(n^2)吗，我仔细琢磨了一小会儿才改口说是O(nlogn).
其实这并不是最优的做法，当时面试官好像没太在意这个就没让我继续优化。
面试完之后我跟同学讨论了一下发现对每个节点都合并左右子节点对应的森林有点浪费，可以把最终结果数组用一个全局变量来存储，每次要拆出一个子树的时候就直接把它添加到那个全局变量数组里，这样就省去了数组合并的操作，
于是整个DFS过程对于每个节点来说都是O(1)复杂度，总复杂度就变成了O(n)。


Follow up: what if the tree is immutable and you can not modify it?

public List<Node> treeToForest(Node root) {
    List<Node> res = new ArrayList<>();
    dfs(root, true, res);
    return res;
}

private Node dfs(Node curr, boolean parentIsErasable, List<Node> res) {
    if (curr == null) return null;
    boolean currIsErasable = shouldBeErased(curr);
    if (parentIsErasable && !currIsErasable) res.add(curr);
    curr.left = dfs(curr.left, currIsErasable, res);
    curr.right = dfs(curr.right, currIsErasable, res);
    return currIsErasable ? null : curr;
}

class Node {
    Node left;
    Node right;
}

7.做完上面这题之后还有十几分钟的时间，面试官就又开始打字出了另外一道题，说一个数组里其他的数都出现了两次，只有一个数出现了一次，要我找出这个数。
他问我可能听说过这个题吧，我说我的确听过，他就加了个条件，说这个数组是排好序的。
这题目比较简单，所以就应该尽量分析得透彻一些，努力留个好印象。我先说如果数组没排序，
我们可以遍历一遍数组，用xor操作把所有元素异或起来，最终得到的那个结果就是只出现了一次的元素，总复杂度为O(n)。
既然现在数组排好序了，那么我们就可以用复杂度更低的算法，可以用二分查找来找出对应的元素，总复杂度就是O(logn)。
binary search代码本身不复杂，只是空口讲也不那么好讲清楚，所以索性就一边讲一边顺手把代码写出来，
写求数组中间元素，判断它左右相邻元素是否跟他相同，如果它正好就是那个只出现了一次的，直接返回它即可；否
则的话找出这个数第一次出现的位置（要么就是当前位置，要么就是当前位置减1），设第一次出现位置下标为idx,如果idx为偶数那么只出现了一次的元素肯定在数组右半部份（假设数组下标从0开始），
如果idx为奇数那么目标就在左半部分，继续这样二叉查找。


8、
  You are given a compound word and a dictionary.
  Your question is to consumer every letter in the word using only words from dictionary.
  Your need to find the longest list of substring.


  Example 1:
  Word: "foobar" Dictionary: ["foo", "bar"]
  Output: ["foo", "bar"]

  Example 2:
  Word: "abcde" Dictionary:["a", "b", "ab", "cde"]
  Output: ["a", "b", "cde"]. 牛人云集,一亩三分地
  Explaination: ["ab", "cde"] can also consume the compound word, but it is shorter than ["a", "b", "cde"]


9、
a. Given a list of node, find its root. Follow up, return the value of root. Can you do it constant time?
b. Given a list of boarding pass. Return the full trip..1point3acres网
Example:
Given

SJC -> ABC
SFO -> SJC
ABC -> YYZ
YYZ -> XXX


10、第一轮，白人小哥，上来就说自己是第一次面试，感觉比我还紧张出了一道高频自行车匹配，先问一个人怎么找到最近的车，然后扩展到很多人很多车的情况。
11、第二轮，白人大哥，给一个doublelinked list的pointers的set，问这些pointers可以组成几个connected components. 这题我开始理解错了。。
以为是要我求最长的connected component的长度（教训，一定要再三确认题目的意思！！）写了code之后才发现理解不对，赶紧又重新想了一下。
说了下可以用并查集来做的思路，但没时间写代码了。这轮估计评价不行
12、第三轮，国人小哥，非常nice，上来就说中文。题目是对一个树的nodes进行delegate，结果可以是真或者假，如果为假就要删除这个node，最后返回一个set，
里面是delegate之后剩下的树的root node..
13、第四轮，俄国口音小哥，假设已经有一个decode function，可以按如下规则decode: 数字+x+char = 重复这么多数字的char
e.g. 5xy -> yyyyy,  10xabc -> aaaaaaaaaabc
写一个encode function，把string encode成这种结构，可以做到decode(encode(string)) == string，encode之后的string应该尽量短

我就先说了下像aa这样的变成2xa会更长，所以只要对重复三次或以上的char做压缩就好。
写完了代码之后，小哥说，有些corner cases你没有cover，我反应过来是对于原先就已经是"6xa"这样的string，encode不能正确处理。于是又讨论了一下，说可以把这种情况变成"1x6xa"。

14、第五轮，白人老哥，进公司十年多了。先问了一题，怎么把一个vector<string> encode写到一个file里，再从file里decode出来恢复成原来的vector<string>。
然后第二题，banana <-> cololo，怎么判断两个string有这种相似的结构。写了之后，follow up是如果有一个很大的词典，怎么快速判断一个词是不是和词典里的某个词相似。

15、
1. 亚裔小姐姐  第一题search value in  a string of sorted integer（高频） : eq. “1 3 5 7 11 18 100” target="7"
    第二题  62 followup 63
2. 亚裔大叔 面经题 给一堆点的坐标   找这些点构成的平行于坐标轴的矩形的最小面积 （高频）
3. 印度小哥 第一题  给一个矩阵  一个人的位置 找离他最近的自行车  （没错 就是最简单的bfs）
   导致第二题完全没时间  第二题是568  这题没刷到  没时间了说了最暴力的dfs解法（想抽死自己）  这轮大概是挂了
4. 美国小哥 给一个number d， 返回tournament  order   比如说 d = 3 就返回  (((1,8),(4,5)),((2,7),(3,6)))


16、
第一轮，第一道题是叫smashable string 就是给你一个词，问能不能找出一个方法，每次去掉一个字母，然后仍然是词（有个api告诉你是不是词），直到只剩下一个字母。记忆化搜索解决，然后仔细讨论了一下复杂度，然后因为用到了记忆化，就是记录访问过词是不是smashable的，所以讨论时间复杂度的时候产生了分歧，说了挺久。 然后第二题是自行车人，讨论了一会后就说了最直接的bfs和pq的做法，但是时间只来得及写了伪代码。感觉挂的话这轮是挺大的挂点吧
第二轮，类似LC的猜词，但是是猜颜色，先是实现这个猜颜色的api，要求返回位置和颜色都一样的数量，和颜色一样位置不一样的数量。然后接下来就和lc的题差不多一样，我当时用的是random search的做法，lc上也有min-max的做法，搞完random提了一嘴，没详细说。
第三轮，先上来问了十多分钟简历。然后题类似丝霰舞，但是给了个挺复杂的情形。写完了让我证明一下这题greedy为什么是正确的，然后就有点懵，瞎说了一堆。然后又让我说一下arraylist和linkedlist的区别这题你觉得用什么存输入比较好，有什么情况是linkedlist比arraylist强的。然后聊完又说了一会他们组的事，然后又说了两分钟简历。
第四轮，类似妖舞妖吧，但是和unicode结合起来了。

17、第一轮，第一道题是叫smashable string 就是给你一个词，问能不能找出一个方法，每次去掉一个字母，然后仍然是词（有个api告诉你是不是词），直到只剩下一个字母。记忆化搜索解决，然后仔细讨论了一下复杂度，然后因为用到了记忆化，就是记录访问过词是不是smashable的，所以讨论时间复杂度的时候产生了分歧，说了挺久。 然后第二题是自行车人，讨论了一会后就说了最直接的bfs和pq的做法，但是时间只来得及写了伪代码。感觉挂的话这轮是挺大的挂点吧
   第二轮，类似LC的猜词，但是是猜颜色，先是实现这个猜颜色的api，要求返回位置和颜色都一样的数量，和颜色一样位置不一样的数量。然后接下来就和lc的题差不多一样，我当时用的是random search的做法，lc上也有min-max的做法，搞完random提了一嘴，没详细说。
   第三轮，先上来问了十多分钟简历。然后题类似丝霰舞，但是给了个挺复杂的情形。写完了让我证明一下这题greedy为什么是正确的，然后就有点懵，瞎说了一堆。然后又让我说一下arraylist和linkedlist的区别这题你觉得用什么存输入比较好，有什么情况是linkedlist比arraylist强的。然后聊完又说了一会他们组的事，然后又说了两分钟简历。
   第四轮，类似妖舞妖吧，但是和unicode结合起来了。


18、一道题：给两个值N和S，求所有方式组合N，加起来是S的和。比如N=2， S=5： 答案是6。(0,5), (1,4), (2,3), (3,2), (4,1), (5,0)
我是这样想的，你看对不对.留学论坛-一亩-三分地
一个N 一个S，N是要用的数字的数量，S是目标和
转移可以从T(N-1, S-i)开始，0 <= i <= S
例如，T(5, 3) = T(4, 0) + T(4, 1) + T(4, 2) + T(4, 3)
T(4, 0)的每一个子答案添一个3 构成T(5, 3)一个子集
T(4, 1)的每一个子答案添一个2 构成T(5, 3)一个子集
T(4, 2)的每一个子答案添一个1 构成T(5, 3)一个子集
T(4, 3)的每一个子答案添一个0 构成T(5, 3)一个子集
合起来就是T(5, 3)

我感觉这题应该有公式解，找找规律没准能找出来。

19、
1.三姐，人不错，题目是一个grid里面有一堆位置为1，然后剩下的任意位置都有一个到最近的1的距离d，求剩下所有位置的d的最大值。这轮我和三姐讨论时间复杂度讨论了很久，而且开始思路没打开，方法一直不够高效，但是小姐姐人挺好的，慢慢引导我，最后才发现其实一遍bfs+memo就可以了。
来源一亩.三分地论坛.
2.三哥，人一般。。。跪在这轮了。。。题目是给一个graph，然后给定起点和终点，每一个节点都有一个值，希望找到一个path，尽可能降低这个path中的最大node的值。这轮有点慌，因为上来三哥给了一些数学题热身，然后我以为他要考多线程啥的。。。其实这道题目就是直接dfs+memo，从起点搜索就好了，但是我可能脑子抽了，我从终点往前找，按理来说，应该没啥大影响，但是三哥表示不能理解我的做法，还有确实在一些可能出现的回路上的处理和无解的情况没有聊好，到后面三哥想吃饭了，就不想和我聊了，估计觉得我做得不对吧= =

中午，一个国人大哥带我去吃饭，聊了会儿天，人还挺好的。。
. 一亩-三分-地，独家发布
3.白人小姐姐，上来话不多说，面露微笑，直接做题。
第一题是一个string，然后#代表backspace，判断俩string相等。开始我说用stack，然后小姐姐说没memory咋办，我说two pointer，小姐姐继续说，如果我不给动input，假定input是const的，你还能O(1)空间吗？我：emmmmmm。。。。
第二题是一堆骰子，然后每一面有一个字母，求这堆骰子能否掷出target string。这题我是直接DFS做了。。。

4.国人小哥。。
第一题，一个vector，求首位相同的字母的最大subarray长度。hashmap做，简单跑几个testcase。
第二题跟这一题类似，就是求一个最长subarray，其和为0的长度。一样的道理，hashmap，然后把test case跑下，聊了下为啥这么做。
这轮剩下的时间比较多，就跟小哥聊了会儿天，后来小哥把我送出去了。

20、
第一轮： 给一个doubly linked list and a node， 找到这个node并删除。-google 1point3acres
我没考虑corner case。可能这是我后面又面一轮的原因吧。
. visit 1point3acres for more.
第二轮：两个人要找时间开会。给了两个List, 代表两个人的availability，比如 person1 = [[start0, end0], [start1, end1],...]，然后再给了一个最小时间T。要求找到一个长度大于T的时间段开会，随便找一个就行，如果没有就返回空。.本文原创自1point3acres论坛
follow up 1: 扩展到K个人。. 1point3acres
follow up 2: 对于K个人，很可能无法找到一个满足K个人都有空的时间段。这种情况下，找一个最多人有空的时间段。

i=0, j = 0
p1.end - p1.start < T: i++
p2[j].end - p2[j].start < T: j++
if p1.start < p2[j].start ：
    p1.end - p2[j].start >= T ? return { p2[j].start, p1.end } : i++. 一亩-三分-地，独家发布
else
    p2[j].end - p1.start >= T ?  return {p1.start , p2[j].end } : j++


21、在职跳槽
1.一个小姐姐，先给了一段代码debug，是一个arraylist的实现 比较简单， 后面再写了一个题 梨蔻 傘琪屋.
2. 另外一个小姐姐，让我实现了一个带时间戳的 哈希表，貌似是最近的高频题
3. 午餐，一位大哥心情估计不太好，没怎么主动和我聊天，有点尴尬。。。
3.午餐过后 一位abc小哥， 第一题问字符串能不能transfer 过去，高频题，用哈希表算出现没出现， follow up有点忘了，貌似是问需要几次才能完全转换过去-google 1point3acres
4.进来两位国人 问了题目去判断 两个字符串按顺序去生成另外一个字符串是否是正确的，就是两个字符串一个一个字符取去生成第三个，看合不合法。. From 1point 3acres bbs
5.最后一个是一位印度小姐姐，人感觉是最好的，问了一个关于队列加哈希表的问题，有一个service过去一段时间只能执行 n 次，然后给个写个api 去call 这个service能不能被call， 如果能记下来如果不能返回false.1point3ac

22、电面
给两个字符串a,b，第一个字符串a可能带若干退格字符('|' 表示)， 问a经过这些退格操作后，最后是否和b一样，要求O(1) space，不能修改a和b
public boolean BackSpaceCmpare(String S, String T) {
    int i = S.length() - 1;
    int j = T.length() - 1;

    while (true) {
        for (int count = 0; i >= 0 && (count > 0 || S.charAt(i) == '#'); i--) {
            count += S.charAt(i) == '#' ? 1 : -1;
        }

        if (i >= 0 && j >= 0 && S.charAt(i) == T.charAt(j)) {
            i--;
            j--;
        } else {
            return i == -1 && j == -1;
        }
    }
}


23、汇率题（union-find必须要会）

24、onsite
1. Binary tree find node with index. input: root node, target index, output: boolean. 这个index的意思是从root 开始按bfs的方法对node进行编码，不存在的node也会参与编码。
                 1
            2       3
     4    [null] 6    7
[null]  9

我最开始给出的bfs解法，然后面试官说可不可以更快一点，最后和他一起纠结了一会儿给了logn的解法，和target index 的binary represent有关。. From 1point 3acres bbs

2. move knight to target place. 给的是infinity的chessboard, start from (0, 0). 用的bfs，最开始给面试官证明了一下给任意的destination一定能到那个点。

lunch with 印度小哥，小哥比我还羞涩&#128514;. more info on 1point3acres

3. 小哥就问了另一道题，find max in an array，给他证了一下为什么O(n) 是最优解。
follow up 是如果transitive property doesn't hold 怎么办，
给了time & space 都是O(n)的解法。再follow up是如果想不用extra space也不允许修改input array怎么办。没做出来。。。
.1point3acres网
4. 汇率转换，用uf做了，小哥表示interesting，很满意。


25、onsite

第一轮， 国际象棋中的马Knight跳看能不能走到棋盘内的目标,follow up如果带障碍还能不能走到，follow up如果棋盘没有边界且带障碍，还能不能走到target，没有边界会给解题带来什么影响


第二轮， 车厢里给几排座位,找最大的空隙坐，每次坐选择的那个空隙中间，每个人假设占用的宽度都是单位长度，返回找到的最大空隙吧


第三轮， 迷宫， 利口肆玖伶related, 看能不能走到target并且打印路径，坑的是给了我两套grid system，中计了浪费了很多时间，最后给了我一个api让我查询是不是可以穿过，
不用我自己写，两套grid system你可以想象成他是在格子中间加障碍，而不是格子不能走，和原题有所区别，这次面试真的是涨经验了


第四轮， i18n缩写，利口贰扒扒，给一串单词，要求返回没有冲突的一串缩写
public class ValidWordAbbr {
    private final Map<String, Boolean> abbrDict = new HashMap<>();
    private final Set<String> dict;

    public ValidWordAbbr(String[] dictionary) {
        dict = new HashSet<>(Arrays.asList(dictionary);
        for (String s : dict) {
            String abbr = toAbbr(s);
            abbrDict.put(abbr, !abbrDict.containsKey(abbr));
        }
    }

    public boolean isUnique(String word) {
        String abbr = toAbbr(word);
        Boolean hasAbbr = abbrDict.get(abbr);
        return hasAbbr == null || (hasAbbr && dict.contains(word));
    }

    private String toAbbr(String s) {
        int n = s.length();
        if (n <= 2) {
            return s;
        }

        return s.charAt(0) + Integer.toString(n - 2) + s.charAt(n - 1);
    }
}

第五轮， 给1TBstorage，每次写都会写1MB的数据（随机从哪里开始写），
设计两个api，一个是handle write request， 一个是查询整个空间有没有被写满（每个位置都至少被写过一次），
不清楚面试官想考我什么，我往merge interval上靠了，因为这样就不用每个byte去check了，这样最多1M个intervals，
这个是最迷的一轮，面试官一直问我这样写有什么问题，还不提示我到底是算法还是什么底层方面有问题，一直到送我离开大楼都没有松口

26、电面（面经题）
所有相邻的节点为一个集群
给定一个包含双链表结点（结点中的值为一个整数，结点与结点间或许相临）的list， 求集群的个数
例子：
双链表：
(1) ⇔ (2) ⇔ (3) ⇔ (4) ⇔ (5)
数组和集群个数
[(1) ,(3), (5)] ⇒  3
释义：由提供的链表可以看出，结点1，3，5互不相邻，形成三个集群，
以下例子类似。[(1), (2), (3)] ⇒ 1
            [(1), (2), (4), (5)] ⇒ 2


先全部加到set里 扫一遍set：如果当前节点的pre不在set里 count ++ 其他情况continue

补充内容 (2018-11-8 13:10):
还有种情况是pre为null 也count++

27、大二电面
LeetCode 418:
public class Solution {
    public int wordsTyping(String[] sentence, int rows, int cols) {
        String s = "";
        for (String str : sentence) {
            s += str;
            s += " ";
        }

        int start = 0;
        int len = s.length();

        for (int i = 0; i < rows; i++) {
            start += cols;
            if (s.charAt(start % len) == ' ') {
                start++;
            } else {
                while (start > 0 && s.charAt((start - 1) % len) != ' ') {
                    start--;
                }
            }
        }
        return start / len;
    }
}

Random Number Generator in Arbitrary Probability Distribution

28、onsite 5 轮
一：蠡口巴就灵
二：排序，要我找怎么做能够使得swap的次数最少 （使用插入排序）
三：类似于蠡口44，但这里只需要考虑星号，没有点。
我用了个dp，跟他画了下match的图，做出来了。
然后他说如果我有很多pattern，然后给你一个input，要你看看这个input符不符合里面某一个pattern，你怎么做？
如果还那么做的话，时间复杂度会比较高，我说那你把那些pattern建成一个trie，拿你的input进去爬。跟他啰嗦了半天，也挺满意的。
四：类似于压缩字符串的问题，比如aaaabccc，携程4Xab3Xc，一个字符的不用去转换，其他的按照重复次数压缩。
先让我实现出来。然后又问我这么搞有没有什么局限性，我说你要是input里面有X你就gg了。
他说那怎么修改？而且要求不改变decode的方式的情况下。
我想了半天，大概意思是在单个数字面前，哪怕你只有一个数字，也去标明重复的次数。比如7bbbc，写成1X73Xbc，
另外如果碰到X要哪怕只有一个字符，也要写成1XX。比如aaXbc，写成2Xa1XXbc。
五：类似于蠡口把武林或者天际线那道题。大概是在一个矩阵中给你一些点，让你去expand这些点按照一个参数。
这些点比如是被colored的，比如说都是1，矩阵里其他点都是0，
如果expand factor是2的话，那每个点为中心会color一块边长为4的正方形。
让你去implement这个。听着不难，最暴力的也能做，但是会重复color很多块地方。
我就说那我们就按照横轴扫描扫描，类似于那种思想，搞出来哪些地方是被覆盖的哪些地方不是的，这样的话就不用重复去color了。
这题感觉比较开放型，我也不确定答得对不对。不过嘴巴一直不停的说我的思路，感觉还行吧。


29、onsite
1.(类似lc253) 第一轮小哥，List of annotations, 把他们的level设定的越低越好，并且不能有重叠。Annotation有三个fields: int start, int end, int level。. check 1point3acres for more.
比如，以下5个annotations：

level

0        -----          ----  -----

1           ------------------
2                 -------

是一个正确解

level

0        -----          ----

1           ------------------
2                 -------      -----
就不对
2. 第二轮大哥，找一个matrix最长的increasing path的长度，上下左右走，e.g.
0    9    1    2
10   11   3    4
5    6    7    8

应该返回4（1->3->7->8或者5->6->7->8）

3. 好像是国人小姐姐，一堆坐标中找出两个点平均分开所有点，面经原题，没接住-
4. 最后一轮小哥，一个缓存，存最近k个数的middle 90%的平均数，也就是去掉最高5%，去掉最低5%，剩下90%的平均数


30、电面
第一题， 两个string A = azaz  B = bza
warm-up: 能不能用B中的character创造出A来。
返回最少去B 中取characters的次数来造出A。（每次去B中去characters，不一定要连续的characters，但是不能换顺序，比如可以取出za，ba这样）
比如例子中的就是分三次取出 a，za，a
贪心法
private static int getRes(String s, String t) {
        int m = s.length();
        int n = t.length();
        int i = 0, j = 0, count = 0;

        while (true) {
            boolean move = false;
            while (i < m && j < n) {
                if (s.charAt(i) == t.charAt(j)) {
                    i++;
                    j++;
                    move = true;
                } else {
                    j++;
                }
            }
            if (!move) {
                return -1;
            }
            count++;
            if (i < m) {
                j = 0;
            } else if (i == m) {
                break;
            }
        }
        return count;
    }

第二题：
两个function ： setState(start,end,on_or_off)
                       getState(index)
先叙述一下怎么可以实现，我就说用array represent就可以，然后，如果array是0000001000000001000000，这种就是有很多off，只有几个on怎么搞？
然后，如何能做到setState() O(1),hint可以牺牲getState()



31、6轮onsite
第一轮亚裔：
第一题是一道超高频的面经题，可以用dfs+union find来解决。核心是找出有多少cluster
一个棋盘，上面放上石头，按照这个rule拿走石头：
要是某个石头的所在行或者所在列还有其他石头，那么该石头可以拿走。问最多可以拿走多少石头。
没见过这个题，所以全程带飞，试了各种heuristic，没被认同。

后来跟他讨论发现其实是number of island，
每个island是由共行或者共列的marble组成的，
先求本来matrix有多少石头，再求有多少marble island，前者减后者就是最多能删多少个石头了。
 O(mn) 就是DFS island的写法，只不过marble不需要相连，只需要共行共列就可以了。

第二轮白人：
先给了一个很简单的python练手题，
主要是看你对 str.split() 和 str.split(" ") 的区别知道不。我不知道。
然后进入正题，说有个很大的 string list, string 长度不定，这些string都是alien写的
，里面不妨多多少少有写错的字母，比如iwasgeventhisprobllmbytihavennideahowttsolviit
 那么，这个string虽然有个别错误，但是还是看的出来是“ I was given this problem... ”。
 所以，给一个billions of such strings，detect the ones that are likely to be readable by human.
  我当时说trie，白人认同，不过怎么搜索，当时没想清楚，时间也不够了。

第三轮国人：
简单的三进制乘法，注意输入输出都是list of numbers， [1,0,1,2] 乘以 [1] = [1,0,1,2]。LOL

第四轮烙印：
Given filters contain only 1 '*', like ['ab*de', '*cd', 'wha*' ...], 然后
input a word, output if any filter would match。 例如 'what' 跟 'wha*' 比配了，* 是wild card，可以当任意0-N个字母。
此题先把filter 按照* split
，给出 prefix trie and suffix trie，然后去匹配input，必须prefix suffix 都match到同一个 filter 才能 return true。
此题没写完，

第五轮烙印聊project

第六轮国人：
median of two sorted array.
然后是 find the K-percentile given a trillion unsorted array （允许使用1000台机器），
此题把array 分给1000台，分别各自sort，然后汇总取 the k-percentile number. 次轮我要了太多提示，国人不满意。


32、电面
先问什么是sub sequence，正确定义应该是顺序不变，删（or not）一些元素所形成的子集。

题目：给一个int array，问最大odd sum from it's subsequence.

33、
第一轮：
lc452
输入是一个interval的list （begin，end都是int，假设两端都是closed），输出是一个点的list （List<Integer>）。要求是：输入中的每个interval都必须包含至少一个输出中的点，输出的size尽可能小。举几个例子：
ex1：输入：[(1, 3), (4, 5)], 输出可以是[1, 4]
ex2: 输入： [(1, 3), (2, 4)]，输出可以是[2]。因为两个interval都包含2这个点。

第二轮：
第一题是实现一个stack类的int positionOf(T e)函数 用来返回元素e在栈中的位置，O(1)时间。位置的定义是元素e距离栈顶的距离。. From 1point 3acres bbs
第二题是李寇德844


34、onsite
1. text editor， movecursorright(), movecursorleft(), insertcharacter(), backspace().  Follow up, undo
2. valida parenthesis, 给一个N，代表parenthesis的个数，求所有valid结果(lc 22)
3. lowest common ancestor， 给一堆nodes，包含node.mom, node.dad. 求找到两个noodeA, nodeB有没有血缘关系。
（求个最优解法， 我答得是找到所有A的ancestor放到map里， 然后recursive搜索B的ancestor，如果在map里就有关系。感觉不是最优）
4. triple booking， boss的schedule是listofinterval[10:00-12:00, 9:00-11:00, 11:00-12:00], 可能有许多重叠。
 然后你有only 1 interval [start - end], 求你的interval跟boss的schedule有没有triple booking出现 （boss本身triple booking的不算）。 也求个最优解吧

 35、电面
 1） 二叉树转换成链表（lc114）
 private TreeNode prev = null;
 private void flatten(TreeNode root){
    if (root == null) {
    reutrn null;}
 }

 flatten(root.right);
 flatten(root.left);
 root.right = prev;
 root.left = null;
 prev = root;
 2）倒置打印链表，给出两种方法（我用了，递归和链表倒置，分别分析了一下时间空间复杂度）

 36、电面
 今天刚面的。 人狠话不多的东欧口音小哥，一上来就说做题吧。 第一题是删除二叉树坏边，因为准备过所以很快写完了。 第二题是给出N，求N以内翻转后不同数字但还是数字在翻转后的结果。例如N = 10， output = [6, 9]，因为0,8翻转之后还是0,8所以不是，另外10翻转成01也不是数字。
 N = 20, 求[6,9,91,81,61]。 这个array分别对应数字[9,6,16,18,19]。（lc247)

 37、电面（LC427）
 给一个只有黑白pixel的图片，调用给定的两个method，把图片重新画出来。两个method分别是：int readSource(int x1, int y1, int x2, int y2)和void writeTarget(int x1, int y1, int x2, int y2);


38. 电面
题目很奇怪
假设有一堆request (id, start_time, end_time), 要求实现两个函数
start(id, time) 和
end(id, time)
要？？实时？？按start time排序打印出request id
栗子：
(id:1,  start:2, end:10)
(2, 3, 8)
按end time顺序call end(id, time)， 但打印出来不是按end time -> 2 - 1而是 1 - 2


39、onsite
题目就一道很有意思，一直要hints也没写出最优解。
一堆字母，给了长度L，packets 最大能装 M， 要求packets总量最小同时最小的packet里面的字母数达到最大，输出一个list，表示每个packet里面有多少字母？
follow up：
一堆words，给了vector<string>，packets 最大能装 M， 要求最小的packet里面的字母数达到最大，输出一个list，
表示每个packet里面有多少字母？words 顺序不能变，每个word可以单独存在，但是不能拆分。（
只想出来brute force，先greedy求需要多少packets，然后往里存word，比较存或者不存对这个packet有什么影响，但是很慢，hint说可以dp）。

40、电面
一个游戏，给你一个Binary Tree，TreeNode你可以自己设计（可以自己选里面有什么你需要的field）。
游戏规则如下：第一个回合你和你的对手可以选择binary Tree里任意一个Node，然后下个回合可以从已经你已经有的任意node中向还没有被占领的左右或者parent延伸，直到两边都不能动了结束，最后谁的node多谁赢。
因为要向parent走，Node设计里要包含parent的field。
问题是，你是后手，你知道你的对手选好的第一个Node，你的最优选择是哪个Node，
fellow up，你变成了先手，在整棵树里，你的最优选择是哪个Node。

所以就是选对手的node的三个子nodes中，subnodes最多的那个了？
follow up就是选一个node 他的子node中subnodes第二大的第一大，第三大的sum进行对比，选最优的那个吧

对，就是这个思路。三个子node travesal一遍return subnodes最多的，O(n)。. 1point3acres
Follow up就是算其他两个的subnodes之和减去最多subnodes的那个子node的的差，找最优那个。
我当时说的思路是从root开始全部nodes都这么算一遍，我觉得应该还有没有更优的起始点或者什么办法优化我没想到。

41、电面（LC248）
题面背景是竞标会上的号码牌子，给定一个范围，返回哪些数字需要underline才能避免歧义，比如109翻转过来可能是601，这种数字就需要underline， 而37， 111这一类普通的数字，
翻转过来要么仍然是自己，要么没有意义。

就是这么道不难的题，楼主一开始就理解错误。。。我想成了上下对称而不是180度镜面对称。。。所以，这次必挂无疑了

我想的思路是DFS或者说backtracking， 组成号码牌的数字只能从{0， 1， 6， 8， 9}里面选，
组合好的数字需要validate，比如不能是0开头或者结尾，翻转过来不能跟原本一样（分奇偶），这些 case比较多要好好写。。。


41、电面
第一轮：
给两个iterator，写一个iterator class，先iter第一个，第一个空了再iter第二个， 比如myIter([1, 2], [3]) -> [1, 2, 3]。 支持has_next(), next()
followup：写skip(int)， 跳过所有skip的数。这里写的时候在has_next里面预读一个数到buf里， 但是没有考虑到has_next(), skip(1), next()这样的情况。。
followup2：改skip(int), 每次call只跳过这个数一次
比如iter1 = [1, 2], iter2 =[2, 3]
skip(1)
next() * 3 -> [2, 2, 3]
-------------------
skip(2)
next() * 2 -> [1, 3]
-------------------
比较要注意的是
next() * 3 -> [1, 2, 2]-baidu 1point3acres
skip(3)
next() -> StopIteration
------------------
next() * 3 -> [1, 2, 2]
has_next() -> True
skip(3)
has_next() -> False
next() -> StopIteration

第二个followup：
skip(2)
next() * 3 -> [1, 2, 3]

public class solution{
    Iterator i1;
    Iterator i2;
    Iterator iCurr;

    public solution(Iterator i1, Iterator i2){
        this.i1 = i1;
        this.i2 = i2;
        this.iCurr = i1;
    }

    public boolean hasNext(){
        if(iCurr.hasNext()){
            return true;
        }else{
            if(iCurr = i1){
                iCurr = i2;
                return iCurr.hasNext();
            }else{
                return false;
            }
        }
    }

    public int next(){
        return iCurr.next();
    }
}

// followup1
public class solution{
    Iterator i1;
    Iterator i2;
    Iterator iCurr;
    Set<Integer> skipped;
    Queue<Integer> buff;

    public solution(Iterator i1, Iterator i2){
        this.i1 = i1;
        this.i2 = i2;
        this.iCurr = i1;
        this.skipped = new HashSet<>();
        this.buff = new LinkedList<>();
    }

    public boolean hasNext(){
        if(buff.size() > 0){
            return true;
        }else if(iCurr.hasNext()){
            int num = iCurr.next();
            if(skipped.contains(num)){
                return hasNext();
            }else{
                buff.offer(num);
            }
            return true;
        }else{
            if(iCurr = i1){
                iCurr = i2;
                return hasNext();
            }else{
                return false;
            }
        }
    }

    public int next(){
        if(buff.size() > 0){
            return buff.poll();
        }else{
            return iCurr.next();
        }
    }

    public void skip(int i){
        this.skipped.add(i);
    }
}

// followup2
public class solution{
    Iterator i1;
    Iterator i2;
    Iterator iCurr;
    Set<Integer> skipped;
    Queue<Integer> buff;

    public solution(Iterator i1, Iterator i2){
        this.i1 = i1;
        this.i2 = i2;
        this.iCurr = i1;
        this.skipped = new HashSet<>();
        this.buff = new LinkedList<>();
    }

    public boolean hasNext(){
        if(buff.size() > 0){
            return true;
        }else if(iCurr.hasNext()){
            int num = iCurr.next();
            if(skipped.contains(num)){
                skipped.remove(num); // 这里可以enable只跳过一次
                return hasNext();
            }else{
                buff.offer(num);
            }
            return true;
        }else{
            if(iCurr = i1){
                iCurr = i2;
                return hasNext();
            }else{
                return false;
            }
        }
    }

    public int next(){
        if(buff.size() > 0){
            return buff.poll();
        }else{
            return iCurr.next();
        }
    }

    public void skip(int i){
        this.skipped.add(i);
    }
}






第二轮：
写输入法自动补全，字典自定义格式，比较简单的trie traverse
followup：只能return一部分， 比如5个词。这样怎么return会比较好。写了个naive的by freq的做法。
写完后又问有没有其他做法，因为本人有NLP背景，介绍了一下language model
followup2：实际情况里用户是一个字符一个字符打字的，问能不能更高效的从前一次的结果变到后一次。问完我就可能所有词都要删掉或者所有词都要return，所以应该是linear time不能少了。。然后他问能不能再加速一点（电话杂音很大听不太清，貌似说了sublinear什么的。。）后来想到在trie的每个节点里都加上这个前缀的词的set，但是很space inefficient, O(n * word_max_len). check 1point3acres for more.
后来问了如果有很多rank返回结果的方法，比如by freq, by user preference... 应该怎么去做 还有一些其他NLP相关的问题


42、top k elements

43、onsite
1 -》面经题，自行车和Googler，brute force然后各种讨论
2 -》倒数字那题，如果翻转之后数字变了要加下划线，好像也在面经里见过，利口变种，题号不记得了
3 -》给一个list of points，构成一个多边形，然后写一个function，输入是一个point，判断在不在多边形内，各种讨论聊天啥的，最后用求交点奇偶的方法做的
4 -》两个string，S和T，求如何swap S中的两个字符之后使得distance最小，比如“abc” 和 “acb”，就swap第一个string里的 “b” 和 “c”，这样distance就从2变成了0，我和面试官各种分析扯淡聊天，最后没时间follow up了。。
5 -》面经题，一个棋盘，同一行或者列有其他棋子才可以remove，求最多可以remove多少？

44.电面
题目是: encode and decode an array of integers
如[1,13,34]
encode: 数字加逗号，如1,13,14
decode: 按逗号切分，转成integer
follow up: encode and decode an array of String
如["12","20"]
encode: 长度+"?"+string => 2?122?20
decode: 遍历数字直到问号，取字符串，接着找，接着取...
面试的是国人姐姐，给了hint才做出来，希望能放我一马。


反正问号前肯定是长度，问号后肯定是valid string, 就用个stack，单个char一直pop,
pop到问号就把前面的char reverse一下存起来，然后再pop掉长度，然后重复


45、onsite
1、第一轮是一个烙印，上来就问问题。说有一个坐标系，只有第一象限，写addX, addY，和getPartition三个函数。
  addX就是在x = input的那里画条竖线,把象限分隔开。addY就是在y = input那里画条横线。getPartition就是问你一个点x,y属于那个部分。
  没划线的时候，全都是partition 0。画了线之后遵守从下到上，从左到右，partition += 1。比如一个井字，partition就是
  [[6,7,8]
  [3,4,5]
  [0,1,2]]
  一开始说二分查找树，面试官说不行，然后我说那就用列表存。写出来之后他又说应该用二分查找树，真是坑人。

2、扫地机器人LC489
3、猜词
4、汇率

46、电面
二叉树是否平衡然后疯狂问optimization，写了O(N) recursion和iteration的写法，好像还是不满意

47。电面
1. Find the 3rd frequency number in a number list. 我先提了两个做法，一个是sort，一个是hashtable， 做了trade-off比较，然后他让我用hashtable implement；
2. （lc380）A set can GetRandom. 聊了一下query次数，和 内存的trade-off， 然后让我用insert， remove， 和 getrandom都是 O（1）的算法写，开始写的时候他说还有6分钟左右的时间，最后在7分钟的时候写完了。。
3. 那个小哥是做tensorflow的，还有五分钟聊天，我跟他聊了一下做mapreduce的时候用disk （hadoop） 还是 memeory（spark） 在实际工作的时候google 是怎么分析的


48、电面
你对map这个数据结构有什么理解？设计一个map：value除了数值还有有效时间，过了有效时间的话get方法要返回null
11.00.00 put(1, 2, 5000)
11.00.02 get(1) -> 2
11.00.06 get(1) -> null

Follow up:
优化下内存占用，solution就是定期删除过期pair，让我写了cleanUp()的伪代码。然后讨论一下什么时候触发删除：每隔一段时间还是每次get&put。一起讨论下来结果就是看情况权衡。

设计一个Map, get() 和 set() function, 每个set同时还set一个expiration time, get 的时候如果expire了就返回null， 这个用普通hashmap就能解决
follow up 加一个clean function，clean所有expire的entry，我就加了一个heap解决，到这里大概30分钟不到
他说他准备的问题问完了，然后我们又强行聊到40分钟挂电话了

follow up的时候有一个bug，就是set了以后expiration time可能会更新了，这时候要检查一下map里的expiration time是不是真的expire 了才能从map里remove。


49、电面

刚面的google电面，电话那头小哥人特别nice，很友好地解释我不清楚的assumption，简历半句话都没问。
是一道OOD，实现一个接口
Interface Monarchy{
  void birth(String child_name, String parent);
  void death(String name);
  List<String> getOrderOfSuccession();
}
就是一个国王家族，有一个King作为Root，每个人都可以生儿子，也会死，对应前两个method。
而第三个method是把活着的家族成员都加到List：(举个例子)
          root_king
          /         \
       a1            a2
      /  \            /  \
    b1   b2      c1    c2
   /   \     \
d1    d2    d3
那么添加到List的顺序是：root_king -> a1 -> b1 -> d1 -> d2 -> b2 -> d3 -> a2 -> c1 -> c2(且死了的不添加到这个List里面)
也就是说按DFS顺序打印，或者说类似于Tree的PreOrder Traversal(这还是小哥提醒我的)

我是自己先写了个class Member｛｝，里面有个List存children，一个name，一个isAlive。（就像一个有多个子节点的树的节点）
我跟面试官沟通了可以让每个人名字不一样，所以我在实现接口的类里maintain一个HashMap<名字，对应的member>，每当插入就在HashMap里put一个新家族成员

50。onsite
第一轮汇率转换

第二轮 高频森林题，删除一些node求剩下的森林，地里有

第三轮 又出了汇率转换，然后告诉他我已经做过了，然后就换了一道题，然后就。。。跪了
给一个字典和一个random word，用字典里的单词拼valid palindrom,要求包含这个给定的word。字典里每个单词只能用一次
楼主这题完全跪了 到最后也没说出解法。。。最后一直在说思路，一行代码也没写。。。不过面试小哥哥后来安慰LZ说没关系这题比较难

第四轮一个简单的DFS，找路径长度的，DFS+memo 就不提了


51、电面
给一个数组，判断是不是三角序列，也就是数组元素先增加后减少，不能有重复元素，只能有一个峰值

先while (n < n + 1)


52、电面
第一道题，给一个二叉树，存的是int，找到全局里面祖先节点和他孩子节点的差值的最大值。我说用dfs访问每一个节点作为根节点，然后再对每一个根节点做dfs访问他所有孩子节点，更新全局的maxDiff。
然后他让我推了下时间复杂度，我说最好的情况，如果是balanced tree那就是O(nlogn)，如果最坏的情况退化成单链表，那就是O(n^2)。
他说可以，你实现一下吧。写了之后，他让我跑了两个test case，然后说Let's move forward to second problem。



第二道题，有一个字符串的Google pattern "google"，每一个字符可以重复多次或者不出现，比如ggggoogle，googlllle，l，但是相对顺序不能改变，考虑所有的input string都是valid，问里面有多少个l。
一开始没有理解清楚题目意思，我问是不是要先判断input是否valid，他给我说不用，全部都是valid，我说那我的直觉就是扫一遍，然后数有多少个，然后问了时空复杂度，问可以更好吗，问到这儿我差不多明白他是想让我二分了··· 我说那可以二分，用两次二分找到第一个l出现的位置和最后一个l出现的位置，然后相减。他说可以，你写一下呗。写了，一边写一边给他说啥意思，然后他给了我6，7个test case说你跑一下，都跑过以后，他问你有什么想问我的吗··· 就又唠了一下。